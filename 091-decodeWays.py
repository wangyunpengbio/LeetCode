class Solution:
    def numDecodings(self, s: str) -> int:
        # 动态规划
        n = len(s)
        # 如果只有1个字符的输出
        if n == 1:
            if s != "0":
                return 1
            else:
                return 0
        # dp数组中的每个值表示当前位置字符串有几种解码方式
        dp = [0]*(n)
        if (1<=int(s[1])<=9 and int(s[0])==1) or (1<=int(s[1])<=6 and int(s[0])==2): # 从11到19，再从21到26这样的两种解读
            dp[1] = 2
            dp[0] = 1
        elif (int(s[1])==0 and 1<=int(s[0])<=2) or (7<=int(s[1]) and int(s[0])==2): # 比如 10 20 27 28
            dp[1] = 1
            dp[0] = 1   # 前两个if包括了10-29
        elif 1<=int(s[1])<=9 and int(s[0])>=3: # 比如 (31-39,41-49,51-59,61-69,71-79,81-89,91-99)
            dp[1] = 1
            dp[0] = 1
        else: # 其他，包括了00 30 40 其实30 40 应该对应[1,0]，但是由于00 30 这样的开头是没有解读的，所以直接[0,0]
            dp[1] = 0
            dp[0] = 0  # 这个if包括了00-09
        # 五种情况：
        # 第一种，从11到19，再从21到26这样的两种解读
        # 比如"xxx25"的解读方法总数 = "xxxx2"的解读方法总数 + "xxxx"的解读方法总数
        # "xxxx2"的解读方法总数，即把26拆开解读
        # "xxxx"的解读方法总数，即把26整体解读
        # 第二种，20 10 则只能有一种解读，把20当做整体解读
        # 即 "xxx20"的解读方法总数 = "xxxx"的解读方法总数
        # 第三种，27 28 也只能有一种解读，把27分开解读
        # 即 "xxx27"的解读方法总数 = "xxxx2"的解读方法总数          (上述三种包括了10-29)
        # 第四种，01 09 39 99，则只能有一种解读，把99分开解读
        # 即 "xxx99"的解读方法总数 = "xxxx9"的解读方法总数          (该条件包括了01-09,31-39,41-49,51-59,61-69,71-79,81-89,91-99)
        # 第五种，其他，即00 30 40 没有任何的解读方法
        for i in range(2,n):
            if (1<=int(s[i])<=9 and int(s[i-1])==1) or (1<=int(s[i])<=6 and int(s[i-1])==2): # 从11到19，再从21到26这样的两种解读
                dp[i] = dp[i-1] + dp[i-2]                        # 比如"xxx25"的解读方法总数 = "xxxx2"的解读方法总数 + "xxxx"的解读方法总数
            elif (int(s[i])==0 and 1<=int(s[i-1])<=2):
                dp[i] = dp[i-2]
            elif 7<=int(s[i]) and int(s[i-1])==2:
                dp[i] = dp[i-1]
            elif 1<=int(s[i])<=9 and (int(s[i-1])==0 or int(s[i-1])>=3):
                dp[i] = dp[i-1]
            else:
                dp[i] = 0
        # print(dp)
        return dp[n-1]